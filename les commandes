
# Histoirique des commandes

# Partie Docker

#  Installation de crictl et demarrage de minikube

- vagrant up --provision
- vagrant ssh
-> Installation de crictl
- VERSION="v1.22.0"
-> Telechagement du curl
- curl -L https://github.com/kubernetes-sigs/cri-tools/releases/download/${VERSION}/crictl-${VERSION}-linux-amd64.tar.gz --output crictl-${VERSION}-linux-amd64.tar.gz
-> Extraction du fichier
- sudo tar zxvf crictl-${VERSION}-linux-amd64.tar.gz -C /usr/local/bin
-> version de la version

# Installation de nano
- sudo yum install nano
- ls -l /usr/local/bin/crictl
-> Créer un Lien Symbolique
- sudo ln -s /usr/local/bin/crictl /usr/bin/crictl
-> Vérifier le Lien Symbolique
- ls -l /usr/bin/crictl

- crictl version
-> Nettoyage de l'espace
- rm -f crictl-${VERSION}-linux-amd64.tar.gz


# Installation de cri-dockerd

- sudo yum install -y go git
- git clone https://github.com/Mirantis/cri-dockerd.git
- cd cri-dockerd
- cd /home/vagrant/cri-dockerd
- make cri-dockerd
- sudo install -o root -g root -m 0755 cri-dockerd /usr/local/bin/cri-dockerd
- sudo install packaging/systemd/* /etc/systemd/system
- sudo sed -i -e 's,/usr/bin/cri-dockerd,/usr/local/bin/cri-dockerd,' /etc/systemd/system/cri-docker.service
- sudo systemctl daemon-reload
- sudo systemctl enable --now cri-docker.socket

# Insttalation de pluggin cni

- wget https://github.com/containernetworking/plugins/releases/download/v0.9.1/cni-plugins-linux-amd64-v0.9.1.tgz
- sudo mkdir -p /opt/cni/bin
- sudo tar -xzvf cni-plugins-linux-amd64-v0.9.1.tgz -C /opt/cni/bin

-> Demarrage de minikube
- minikube start --driver=none
- kubectl get nodes
- docker --
- git clone https://github.com/ComeDobe/Projet_Complet_DevOps.git
- ll
- cd Projet_Complet_DevOps
- ll
- cd ic-webapp-1.0
- cd sources/
- docker build -f ./Dockerfile_v1.0 -t cdobe01/ic-webapp:v1.0 .
- docker images
- docker run -d --name ic-webapp-test -p 8000:8080 cdobe01/ic-webapp:v1.0
- ip a
-> Test de l'url
- http://192.168.56.8:8000

# Pour relancer le conteneur

- docker stop ic-webapp-test
- docker rm ic-webapp-test
- docker run -d --name ic-webapp-test-new -p 8000:8080 cdobe01/ic-webapp:v1.0
- docker ps -a | grep ic-weapp
- http://192.168.56.8:8000

# Redirection vers les urls

- docker stop ic-webapp-test
- docker rm ic-webapp-test
- docker run -d --name ic-webapp-test -p 8000:8080 -e ODO_URL=http://google.fr PGADMIN_URL=htpp://youtube.com cdobe01/ic-webapp:v1.0

# Parie Kubernetes

- cd ..
- ll
-  cd manifestes-k8s
- ll
- cd ic-webapp
- sudo nano ic-webapp-deployment.yml
- kubectl get ns
- kubectl create -f ic-webapp-namespace.yml
- kubectl get ns
- cd ..
- kubectl apply -f ./ic-webapp/
- kubectl get deploy -n ic-webapp
- kubectl get pods -n ic-webapp
- kubectl describe pod ic-webapp-5b887b7bcf-kzps2 -n ic-webapp
- kubectl delete pod ic-webapp-5b887b7bcf-kzps2 -n ic-webapp

-> Redeploiement du frontend

- kubectl delete pod ic-webapp-5b887b7bcf-kzps2 -n ic-webapp
- kubectl apply -f ic-webapp-deployment.yml
- kubectl get deployments -n ic-webapp
- kubectl get pods -n ic-webapp
- kubectl get svc -n ic-webapp
- kubectl describe svc -n ic-webapp  -> visualisation de port de deploiement

-> Deploiement du backend

-  kubectl apply -f postgres/
- kubectl get svc -n ic-webapp
- kubectl get deploy -n ic-webapp
- kubectl get secret-n ic-webapp

-> Deploiement de Odo

- kubectl apply -f odoo/
- kubectl get svc -n ic-webapp
- kubectl get deploy -n ic-webapp
- kubectl get secret-n ic-webapp
- kubectl get pvc -n ic-webapp
- kubectl get pv -n ic-webapp
